import sqlite3   # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
import csv       # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è –¥–ª—è —á—Ç–µ–Ω–∏—è CSV-—Ñ–∞–π–ª–æ–≤
import re        # –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω)
conn = sqlite3.connect("phonebook.db")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â—ë –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute("""
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,                 -- –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (–∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç)
    name TEXT NOT NULL,                     -- –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    phone VARCHAR(20) NOT NULL UNIQUE,      -- –¢–µ–ª–µ—Ñ–æ–Ω (—É–Ω–∏–∫–∞–ª–µ–Ω)
    email TEXT NOT NULL UNIQUE,             -- Email (—É–Ω–∏–∫–∞–ª–µ–Ω)
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP -- –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
)
""")
conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def add_user():
    name = input("Name: ")
    phone = input("Number: ")
    email = input("Email: ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    cursor.execute("SELECT * FROM users WHERE name = ?", (name,))
    user = cursor.fetchone() #–ø–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    
    if user:
        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
        cursor.execute("UPDATE users SET phone = ? WHERE name = ?", (phone, name))
        print("üîÑ Phone number updated for existing user.")
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ
        cursor.execute("INSERT INTO users (name, phone, email) VALUES (?, ?, ?)", (name, phone, email))
        print("‚úÖ New user was added.")
    
    conn.commit()

# ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
def add_users():
    print("How many users u will add?")
    num = int(input())  # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    for i in range(num):
        pattern = r"\d{12}"           # –®–∞–±–ª–æ–Ω: 12 —Ü–∏—Ñ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, 87001112233)
        pattern2 = r".+@.+\..+"       # –®–∞–±–ª–æ–Ω –ø—Ä–æ—Å—Ç–æ–≥–æ email

        name = input("Name: ")
        phone = input("Number: ")
        check = re.search(pattern, phone)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        
        while not check:
            print("Incorrect phone number please try again")
            phone = input("Number: ")
            check = re.search(pattern, phone)
            
        email = input("Email: ")
        check2 = re.search(pattern2, email)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ email
        
        while not check2:
            print("Incorrect email please try again")
            email = input("Email: ")
            check2 = re.search(pattern2, email)
        
        # –í—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É
        cursor.execute("INSERT INTO users (name, phone, email) VALUES (?, ?, ?)", (name, phone, email))
        print("‚úÖ New user was added.")
    
    conn.commit()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ CSV-—Ñ–∞–π–ª–∞
def upload_from_csv():
    file_path = input("Enter the CSV file path: ")
    try:
        with open(file_path, newline='', encoding='utf-8') as csvfile:
            csvreader = csv.reader(csvfile)
            next(csvreader)  # –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            for row in csvreader:
                if len(row) == 3:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤ —Å—Ç—Ä–æ–∫–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
                    name, phone, email = row
                    cursor.execute("INSERT INTO users (name, phone, email) VALUES (?, ?, ?)", (name, phone, email))
            conn.commit()
            print("‚úÖ Data uploaded from CSV.")
    except Exception as e:
        print(f"‚ùå Error: {e}")

# ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def show_users():
    cursor.execute("SELECT * FROM users")  # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö
    users = cursor.fetchall()
    print("\nüìã All Users:")
    for user in users:
        print(f"ID: {user[0]}, Name: {user[1]}, Phone: {user[2]}, Email: {user[3]}")
    print()

# ‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (LIMIT + OFFSET)
def show_some_users():
    print("Enter number of users per page (LIMIT): ")
    limit = int(input())
    print("Enter page number (starting from 1):")
    page = int(input())
    
    offset = (page - 1) * limit  # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–º–µ—â–µ–Ω–∏—è

    cursor.execute("SELECT * FROM users LIMIT ? OFFSET ?", (limit, offset))
    users = cursor.fetchall()

    print("\nüìã Limited Users:")
    for user in users:
        print(f"ID: {user[0]}, Name: {user[1]}, Phone: {user[2]}, Email: {user[3]}")
    print()

# ‚úÖ –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏
def show_users_by_name(name):
    cursor.execute("SELECT * FROM users WHERE name = ?", (name,))
    users = cursor.fetchall()
    for user in users:
        print(f"ID: {user[0]}, Name: {user[1]}, Phone: {user[2]}, Email: {user[3]}")
    print()
    
# ‚úÖ –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
def show_users_by_phone(phone):
    cursor.execute("SELECT * FROM users WHERE phone = ?", (phone,))
    users = cursor.fetchall()
    for user in users:
        print(f"ID: {user[0]}, Name: {user[1]}, Phone: {user[2]}, Email: {user[3]}")
    print()

# ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ email
def update_user():
    email = input("Input your email to change your number: ")
    new_phone = input("New phone number: ")
    cursor.execute("UPDATE users SET phone = ? WHERE email = ?", (new_phone, email))
    conn.commit()
    print("üîÅ Phone number was updated.")

# ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É
def delete_user_by_phone(phone):
    cursor.execute("DELETE FROM users WHERE phone = ?", (phone,))
    conn.commit()
    print("‚ùå User was deleted.")

# ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
def delete_user_by_name(name):
    cursor.execute("DELETE FROM users WHERE name = ?", (name,))
    conn.commit()
    print("‚ùå User was deleted.")

# üìå –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    while True:
        print("\nüìå Menu:")
        print("1. Add user")
        print("2. Show all users")
        print("3. Update phone number of a user")
        print("4. Delete a user by phone")
        print("5. Upload users from CSV")
        print("6. Show a user")
        print("7. Add multiple users")
        print("8. Show limited users")
        print("0. Exit")

        choice = input("Choose action: ")

        if choice == "1":
            add_user()
        elif choice == "2":
            show_users()
        elif choice == "3":
            update_user()
        elif choice == "4":
            phone = input("Enter the phone number to delete user: ")
            delete_user_by_phone(phone)
        elif choice == "5":
            upload_from_csv()
        elif choice == "6":
            pattern = input()
            if pattern.isalpha():  # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏)
                show_users_by_name(pattern)
                show_users_by_phone(pattern)  # –ú–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Ä–∞–∑–¥–µ–ª–∏—Ç—å
            else:
                print("Sorry, there is no match")
        elif choice == "7":
            add_users()
        elif choice == "8":
            show_some_users()
        elif choice == "0":
            print("üëã Exit...")
            break
        else:
            print("Wrong option, try again")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_menu()

# ‚ùé –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
conn.close()
