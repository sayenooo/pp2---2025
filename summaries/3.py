"""
Лекция L3: Конспект в виде Python кода

Темы:
  1. Функции в Python
  2. Лямбда-функции
  3. Классы и объекты
  4. Наследование

Данный файл содержит примеры и пояснения для каждой из тем.
"""


# ===============================
# 1. Функции в Python
# ===============================

def add(a, b):
    """
    Функция add возвращает сумму двух чисел.
    
    Аргументы:
      a -- первое число
      b -- второе число
      
    Возвращает:
      Сумму a и b.
    """
    return a + b

def greet(name, greeting="Привет"):
    """
    Функция greet возвращает приветственное сообщение.
    
    Аргументы:
      name     -- имя человека
      greeting -- приветствие (значение по умолчанию: "Привет")
      
    Возвращает:
      Строку с приветствием.
    """
    return f"{greeting}, {name}!"


# ===============================
# 2. Лямбда-функции
# ===============================

# Лямбда-функция для умножения двух чисел.
multiply = lambda a, b: a * b
# Пример использования:
# multiply(5, 6) вернёт 30


# ===============================
# 3. Классы и объекты
# ===============================

class Person:
    """
    Класс Person представляет человека с именем и возрастом.
    
    Атрибуты:
      name -- имя человека
      age  -- возраст человека
      
    Методы:
      greet -- возвращает строку с приветствием
    """
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def greet(self):
        """
        Метод greet возвращает строку приветствия с именем и возрастом.
        """
        return f"Привет, меня зовут {self.name} и мне {self.age} лет."


# ===============================
# 4. Наследование
# ===============================

class Employee(Person):
    """
    Класс Employee наследуется от Person и добавляет дополнительные атрибуты:
      position -- должность
      salary   -- зарплата
      
    Переопределяет метод greet для расширенного приветствия.
    """
    def __init__(self, name, age, position, salary):
        # Вызов конструктора базового класса для инициализации name и age.
        super().__init__(name, age)
        self.position = position
        self.salary = salary

    def greet(self):
        """
        Переопределённый метод greet возвращает приветствие с информацией о должности и зарплате.
        """
        base_greeting = super().greet()  # Получаем базовое приветствие от класса Person
        return f"{base_greeting} Я работаю как {self.position} с зарплатой {self.salary} рублей."


# ===============================
# Основной блок выполнения
# ===============================

if __name__ == "__main__":
    print("Лекция L3: Python Functions, Lambda, Classes, Inheritance\n")
    
    # Демонстрация работы функций
    sum_result = add(3, 4)
    print("Сумма 3 и 4:", sum_result)  # Ожидаемый вывод: 7

    greeting_message = greet("Алиса")
    print("Приветствие:", greeting_message)  # Ожидаемый вывод: Привет, Алиса!

    # Демонстрация работы лямбда-функции
    product_result = multiply(5, 6)
    print("Произведение 5 и 6:", product_result)  # Ожидаемый вывод: 30

    # Демонстрация работы классов и объектов
    person1 = Person("Боб", 25)
    print("Приветствие от Person:", person1.greet())  # Пример: Привет, меня зовут Боб и мне 25 лет.

    # Демонстрация наследования
    employee1 = Employee("Катя", 30, "инженер-программист", 150000)
    print("Приветствие от Employee:", employee1.greet())
    # Пример: Привет, меня зовут Катя и мне 30 лет. Я работаю как инженер-программист с зарплатой 150000 рублей.
