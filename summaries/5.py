"""
Лекция L5: Regex in Python

Темы:
  1. Regex in Python
  2. Использование Regex для поиска и сопоставления строковых паттернов в тексте
  3. Метасимволы
  4. Специальные последовательности
  5. Функция compile

В этом конспекте представлены примеры работы с регулярными выражениями с использованием модуля re.
"""

import re

# -------------------------------------------------
# 1. Поиск и сопоставление строковых паттернов
# -------------------------------------------------

def regex_search_match_demo():
    """
    Демонстрация поиска и сопоставления паттернов в тексте.
    
    - re.search ищет шаблон по всему тексту.
    - re.match проверяет, соответствует ли начало строки шаблону.
    """
    text = "Hello, my phone number is 123-456-7890."
    
    # Шаблон для поиска номера телефона в формате 123-456-7890
    pattern = r"\d{3}-\d{3}-\d{4}"
    
    # Поиск паттерна в любом месте строки
    result_search = re.search(pattern, text)
    if result_search:
        print("re.search найдено:", result_search.group())
    
    # Попытка сопоставления паттерна только в начале строки
    result_match = re.match(pattern, text)
    if result_match:
        print("re.match найдено:", result_match.group())
    else:
        print("re.match: шаблон не найден в начале строки.")
    print()


# -------------------------------------------------
# 2. Метасимволы
# -------------------------------------------------

def metacharacters_demo():
    """
    Демонстрация использования метасимволов:
      .    - соответствует любому одиночному символу (кроме символа новой строки)
      ^    - начало строки
      $    - конец строки
      *    - 0 или более повторений предыдущего элемента
      +    - 1 или более повторений
      ?    - 0 или 1 повторение
    """
    text = "abc123xyz"
    
    # Пример использования '.' (любой символ)
    pattern_dot = r"a.c"  # 'a', любой символ, затем 'c'
    match_dot = re.search(pattern_dot, text)
    if match_dot:
        print("Метасимвол . найден:", match_dot.group())
    
    # Использование '^' для указания начала строки
    pattern_start = r"^abc"
    match_start = re.search(pattern_start, text)
    if match_start:
        print("Строка начинается с 'abc':", match_start.group())
    
    # Использование '$' для указания конца строки
    pattern_end = r"xyz$"
    match_end = re.search(pattern_end, text)
    if match_end:
        print("Строка заканчивается на 'xyz':", match_end.group())
    
    # Пример использования '*' - 0 или более повторений
    pattern_star = r"ab*c"  # 'a', затем 0 или более 'b', затем 'c'
    match_star = re.search(pattern_star, "ac")
    if match_star:
        print("Паттерн 'ab*c' найден в 'ac':", match_star.group())
    
    print()


# -------------------------------------------------
# 3. Специальные последовательности
# -------------------------------------------------

def special_sequences_demo():
    """
    Демонстрация специальных последовательностей:
    
      \d - соответствует любой цифре (0-9)
      \w - соответствует буквенно-цифровому символу (и _)
      \s - соответствует пробельному символу (пробел, табуляция, новая строка)
    """
    text = "Order number: A1234, date: 2023-02-22."
    
    # \d+ ищет последовательности цифр
    pattern_digits = r"\d+"
    digits = re.findall(pattern_digits, text)
    print("Найденные последовательности цифр:", digits)
    
    # \w+ ищет последовательности буквенно-цифровых символов
    pattern_word = r"\w+"
    words = re.findall(pattern_word, text)
    print("Найденные слова и числа:", words)
    
    # \s ищет пробельные символы
    pattern_space = r"\s"
    spaces = re.findall(pattern_space, text)
    print("Количество пробельных символов:", len(spaces))
    
    print()


# -------------------------------------------------
# 4. Функция compile
# -------------------------------------------------

def compile_function_demo():
    """
    Демонстрация использования re.compile для предварительной компиляции регулярного выражения.
    
    Это полезно, если одно и то же выражение используется многократно.
    """
    # Компилируем шаблон для поиска email-адресов
    email_pattern = re.compile(r"[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+")
    
    text = "Контактные email: alice@example.com, bob.smith@domain.co.uk"
    emails = email_pattern.findall(text)
    print("Найденные email адреса:", emails)
    print()


# -------------------------------------------------
# Основной блок выполнения
# -------------------------------------------------

if __name__ == "__main__":
    print("Лекция L5: Regex in Python\n")
    
    print("1. Поиск и сопоставление строковых паттернов:")
    regex_search_match_demo()
    
    print("2. Метасимволы:")
    metacharacters_demo()
    
    print("3. Специальные последовательности:")
    special_sequences_demo()
    
    print("4. Использование функции compile:")
    compile_function_demo()
