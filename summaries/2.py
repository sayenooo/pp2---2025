"""
Лекция L2: Python Fundamentals

Темы:
  1. Python While Loops
  2. Python Lists
  3. Python For Loops
  4. Python Arrays
  5. Python Tuples
  6. Python Sets
  7. Python Dictionaries

Данный конспект в виде Python кода содержит примеры и пояснения для каждой из тем.
"""


# ===============================
# 1. Python While Loops
# ===============================

def while_loops_demo():
    """
    Демонстрация цикла while.
    Цикл while выполняется, пока условие истинно.
    """
    print("Демонстрация цикла while:")
    count = 1
    while count <= 5:
        print("Счетчик:", count)
        count += 1
    print()  # Переход на новую строку


# ===============================
# 2. Python Lists
# ===============================

def lists_demo():
    """
    Демонстрация работы со списками (lists) в Python.
    Списки – это изменяемые последовательности.
    """
    print("Демонстрация списков:")
    fruits = ["яблоко", "банан", "вишня"]
    print("Начальный список:", fruits)
    
    # Добавление элемента
    fruits.append("апельсин")
    print("После добавления 'апельсин':", fruits)
    
    # Доступ к элементу по индексу
    print("Первый элемент:", fruits[0])
    
    # Изменение элемента
    fruits[1] = "киви"
    print("После изменения второго элемента на 'киви':", fruits)
    
    # Удаление элемента
    fruits.remove("вишня")
    print("После удаления 'вишня':", fruits)
    print()


# ===============================
# 3. Python For Loops
# ===============================

def for_loops_demo():
    """
    Демонстрация цикла for.
    Цикл for используется для перебора элементов последовательности.
    """
    print("Демонстрация цикла for:")
    numbers = [1, 2, 3, 4, 5]
    for num in numbers:
        print("Число:", num)
    
    print("Цикл for с использованием range():")
    for i in range(1, 6):
        print("i =", i)
    print()


# ===============================
# 4. Python Arrays
# ===============================

def arrays_demo():
    """
    Демонстрация работы с массивами.
    Массивы в Python реализуются с помощью модуля 'array'. 
    Обычно для работы с коллекциями чисел можно использовать списки.
    """
    print("Демонстрация массива с использованием модуля array:")
    import array
    # Создаем массив целых чисел ('i' обозначает тип integer)
    arr = array.array('i', [10, 20, 30, 40, 50])
    print("Начальный массив:", arr.tolist())
    
    # Добавление элемента в массив
    arr.append(60)
    print("После добавления 60:", arr.tolist())
    
    # Доступ к элементу по индексу
    print("Элемент с индексом 2:", arr[2])
    print()


# ===============================
# 5. Python Tuples
# ===============================

def tuples_demo():
    """
    Демонстрация работы с кортежами (tuples).
    Кортежи – это неизменяемые последовательности.
    """
    print("Демонстрация кортежей:")
    dimensions = (1920, 1080)
    print("Кортеж dimensions:", dimensions)
    
    # Доступ к элементам кортежа
    width, height = dimensions
    print("Ширина:", width, "Высота:", height)
    
    # Попытка изменить элемент приведет к ошибке (закомментировано)
    # dimensions[0] = 1280  # TypeError: 'tuple' object does not support item assignment
    print()


# ===============================
# 6. Python Sets
# ===============================

def sets_demo():
    """
    Демонстрация работы с множествами (sets).
    Множества – неупорядоченные коллекции уникальных элементов.
    """
    print("Демонстрация множеств:")
    colors = {"красный", "зеленый", "синий"}
    print("Начальное множество:", colors)
    
    # Добавление элемента
    colors.add("желтый")
    print("После добавления 'желтый':", colors)
    
    # Удаление элемента
    colors.remove("зеленый")
    print("После удаления 'зеленый':", colors)
    
    # Операция объединения множеств
    other_colors = {"синий", "фиолетовый"}
    union_colors = colors.union(other_colors)
    print("Объединение множеств:", union_colors)
    print()


# ===============================
# 7. Python Dictionaries
# ===============================

def dictionaries_demo():
    """
    Демонстрация работы со словарями (dictionaries).
    Словари – коллекции пар "ключ-значение".
    """
    print("Демонстрация словарей:")
    person = {"имя": "Алиса", "возраст": 28, "город": "Москва"}
    print("Начальный словарь:", person)
    
    # Доступ к значению по ключу
    print("Имя:", person["имя"])
    
    # Добавление новой пары ключ-значение
    person["профессия"] = "инженер"
    print("После добавления 'профессия':", person)
    
    # Изменение значения по ключу
    person["город"] = "Санкт-Петербург"
    print("После изменения 'город':", person)
    
    # Удаление элемента по ключу
    del person["возраст"]
    print("После удаления 'возраст':", person)
    print()


# ===============================
# Основной блок выполнения
# ===============================

if __name__ == "__main__":
    print("Лекция L2: Python Fundamentals\n")
    
    while_loops_demo()
    lists_demo()
    for_loops_demo()
    arrays_demo()
    tuples_demo()
    sets_demo()
    dictionaries_demo()
